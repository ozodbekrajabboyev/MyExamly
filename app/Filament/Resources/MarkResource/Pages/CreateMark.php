<?php

namespace App\Filament\Resources\MarkResource\Pages;

use App\Filament\Resources\MarkResource;
use App\Models\Exam;
use App\Models\Mark;
use Filament\Actions;
use Filament\Resources\Pages\CreateRecord;
use Filament\Notifications\Notification;
use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Validation\ValidationException;

class CreateMark extends CreateRecord
{
    protected static string $resource = MarkResource::class;

    public function getTitle(): string|Htmlable
    {
        return "Yangi Baho qo'shish"; // TODO: Change the autogenerated stub
    }

    protected function handleRecordCreation(array $data): Model
    {
        $exam = Exam::with('sinf')->find($data['exam_id']);

        if (!$exam) {
            Notification::make()
                ->title('Xatolik')
                ->body('Imtihon topilmadi!')
                ->danger()
                ->send();
            throw new \Exception('Exam not found');
        }

        if (!$exam->sinf) {
            Notification::make()
                ->title('Xatolik')
                ->body('Imtihon sinf bilan boglanmagan!')
                ->danger()
                ->send();
            throw new \Exception('Exam has no associated class');
        }

        $createdMarks = [];
        $errors = [];

        // Process marks from the form (expected format: marks[studentId_problemId])
        if (!isset($data['marks']) || !is_array($data['marks'])) {
            Notification::make()
                ->title('Xatolik')
                ->body('Baho maÊ¼lumotlari topilmadi!')
                ->danger()
                ->send();
            throw new \Exception('No marks data provided');
        }

        foreach ($data['marks'] as $key => $score) {
            try {
                // Validate the key format (studentId_problemId)
                if (!preg_match('/^\d+_\d+$/', $key)) {
                    throw new \Exception("Invalid mark key format: {$key}");
                }

                [$studentId, $problemId] = explode('_', $key);

                // Ensure studentId and problemId are valid
                if (!is_numeric($studentId) || !is_numeric($problemId)) {
                    throw new \Exception("Invalid student ID or problem ID: {$key}");
                }

                // Validate score
                if (!is_numeric($score) || $score < 0) {
                    throw new \Exception("Invalid score for key: {$key}");
                }

                $mark = Mark::updateOrCreate(
                    [
                        'student_id' => $studentId,
                        'problem_id' => $problemId,
                        'exam_id' => $exam->id,
                    ],
                    [
                        'mark' => $score,
                        'sinf_id' => $exam->sinf_id,
                    ]
                );

                $createdMarks[] = $mark;

            } catch (\Exception $e) {
                $errors[] = "O'quvchi ID: {$studentId}, Topshiriq ID: {$problemId} - Xato: " . $e->getMessage();
            }
        }

        if (!empty($errors)) {
            Notification::make()
                ->title("Ba'zi baholarda xatolik")
                ->body(
                    implode("\n", array_slice($errors, 0, 3)) .
                    (count($errors) > 3 ? "\nVa boshqa xatolar..." : '')
                )
                ->danger()
                ->send();

            throw ValidationException::withMessages($errors);
        }


        if (empty($createdMarks)) {
            Notification::make()
                ->title('Xatolik')
                ->body('Hech qanday baho yaratilmadi!')
                ->danger()
                ->send();
            throw new \Exception('No marks were created');
        }

        // Return the first created mark (Filament expects a single Model instance)
        return $createdMarks[0];
    }

    protected function getRedirectUrl(): string
    {
        return $this->getResource()::getUrl('index');
    }
}
